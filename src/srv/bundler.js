// Generated by CoffeeScript 1.3.3
(function() {
  var Bundler, Script, db, events, http, https, url, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  url = require('url');

  http = require('http');

  https = require('https');

  events = require('events');

  _ = require('underscore');

  db = require('./db');

  Script = db.Script;

  Bundler = (function(_super) {

    __extends(Bundler, _super);

    function Bundler() {
      return Bundler.__super__.constructor.apply(this, arguments);
    }

    Bundler.prototype.getScript = function(uri, ord, cb) {
      var httpLib, rObj, scriptData;
      rObj = url.parse(uri);
      scriptData = '';
      httpLib = rObj.protocol === 'https:' ? https : http;
      return httpLib.get({
        host: rObj.host,
        path: rObj.path,
        port: rObj.port
      }, function(resp) {
        resp.on('data', function(chunk) {
          return scriptData = scriptData + chunk;
        });
        return resp.on('end', function() {
          return cb(ord, scriptData);
        });
      });
    };

    Bundler.prototype.getBundle = function(scriptKeys) {
      var bundle, scriptsDownloaded,
        _this = this;
      console.log('BUNDLING: ', scriptKeys);
      bundle = [];
      scriptsDownloaded = 0;
      return Script.where('code')["in"](scriptKeys).exec(function(err, scripts) {
        var i, script, scriptTitles, _i, _len, _results;
        if (err) {
          console.log(err);
        }
        scripts = _.sortBy(scripts, function(s) {
          return _.indexOf(scriptKeys, s.code);
        });
        scriptTitles = _.map(scripts, function(scr) {
          var _ref, _ref1;
          return "" + ((_ref = scr.title) != null ? _ref : '') + " (" + ((_ref1 = scr.code) != null ? _ref1 : '') + ")";
        });
        _results = [];
        for (i = _i = 0, _len = scripts.length; _i < _len; i = ++_i) {
          script = scripts[i];
          _results.push(_this.getScript(script.versions.latest, i, function(ord, scriptData) {
            var bundled;
            bundle[ord] = scriptData;
            scriptsDownloaded++;
            _this.emit('progress', scriptsDownloaded);
            if (scriptsDownloaded === scripts.length) {
              bundled = '/* scripts bundled with â™¥ by scrundle.me -- includes :' + scriptTitles.join(', ') + '*/ \n';
              return _this.emit('bundle', bundled + bundle.join(';'));
            }
          }));
        }
        return _results;
      });
    };

    return Bundler;

  })(events.EventEmitter);

  module.exports = Bundler;

}).call(this);
