// Generated by CoffeeScript 1.3.3
var Bundler, Script, User, db, io, mongoose, _;

db = require('./db');

User = db.User;

Script = db.Script;

mongoose = db.mongoose;

_ = require('underscore');

io = require('socket.io');

Bundler = require('./bundler');

module.exports = function(app) {
  var sio;
  sio = io.listen(app);
  sio.set('authorization', function(data, accept) {
    var cookieStr, ssid;
    if (data.headers.cookie) {
      cookieStr = _.find(data.headers.cookie.split(';'), function(i) {
        return /express\.sid/.test(i);
      });
      ssid = unescape(cookieStr != null ? cookieStr.split('=')[1] : void 0);
      data.sessionId = ssid;
      app.store.get(ssid, function(err, sess) {
        var _ref;
        data.session = sess;
        return data.userId = sess != null ? (_ref = sess.user) != null ? _ref._id : void 0 : void 0;
      });
    } else {
      return accept('No cookie transmitted.', false);
    }
    return accept(null, true);
  });
  sio.sockets.on('connection', function(socket) {
    console.log('session: ', socket.handshake.session);
    socket.set('userId', socket.handshake.userId);
    socket.on('script', function(data, cb) {
      var list, q,
        _this = this;
      console.log('sync: ', JSON.stringify(data));
      switch (data.method) {
        case 'read':
          if ((data.id != null)) {
            return Script.findById(data.id, function(err, script) {
              return _this.emit('script', 'read', script);
            });
          } else if ((list = data.options.list)) {
            return Script.list(list, function(err, matchingScripts) {
              console.log('sending ', _.pluck(matchingScripts, 'code'));
              return _this.emit('script', 'read', matchingScripts);
            });
          } else if ((q = data.options.query)) {
            return Script.search(q, function(err, matchingScripts) {
              console.log('sending ', _.pluck(matchingScripts, 'code'));
              return _this.emit('script', 'read', matchingScripts);
            });
          } else {
            return Script.find(function(err, scripts) {
              return _this.emit('script', 'read', scripts);
            });
          }
      }
    });
    socket.on('myScript', function(data, cb) {
      var id,
        _this = this;
      switch (data.method) {
        case 'read':
          return Script.getForUser(socket.handshake.userId, function(err, myScripts) {
            return cb(myScripts);
          });
        case 'update':
          console.log('updating ', data.model);
          id = data.model._id;
          delete data.model._id;
          delete data.model._author;
          return Script.update({
            _id: id
          }, {
            $set: data.model
          }, function(err, resp) {
            return console.log('update resp:', resp);
          });
        case 'codeExists':
          return Script.findOne({
            code: code
          }, function(err, script) {
            console.log('hi: ', script);
            return cb(script);
          });
      }
    });
    return socket.on('scrundle', function(codes) {
      var bd,
        _this = this;
      console.log('recv:', codes);
      bd = new Bundler();
      bd.getBundle(codes);
      bd.on('bundle', function(bundle) {
        return _this.emit('scrundle:source', bundle);
      });
      return bd.on('progress', function(count) {
        return _this.emit('scrundle:progress', count);
      });
    });
  });
  return sio;
};
