// Generated by CoffeeScript 1.3.3
var module, w,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

w = window;

w.sock = w.io.connect('http://dev.scrundle.me');

w.ck = CoffeeKup;

$.fn.selectText = function() {
  var range, selection, text;
  text = $(this)[0];
  if ($.browser.msie) {
    range = document.body.createTextRange();
    range.moveToElementText(text);
    return range.select();
  } else if ($.browser.mozilla || $.browser.opera) {
    selection = window.getSelection();
    range = document.createRange();
    range.selectNodeContents(text);
    selection.removeAllRanges();
    return selection.addRange(range);
  } else if ($.browser.safari) {
    selection = window.getSelection();
    return selection.setBaseAndExtent(text, 0, text, 1);
  }
};

w.wait = function(someTime, thenDo) {
  return setTimeout(thenDo, someTime);
};

w.doEvery = function(someTime, action) {
  return setInterval(action, someTime);
};

Backbone.Model.prototype.connectSocket = Backbone.Collection.prototype.connectSocket = Backbone.View.prototype.connectSocket = function() {
  var _ref;
  return (_ref = this.io) != null ? _ref : this.io = window.sock;
};

Backbone.View.prototype.open = function(cont) {
  if (cont == null) {
    cont = '.main';
  }
  this.$el.appendTo(cont);
  return this;
};

module = function(target, name, block) {
  var item, top, _i, _len, _ref, _ref1;
  if (arguments.length < 3) {
    _ref = [(typeof exports !== 'undefined' ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
  }
  top = target;
  _ref1 = name.split('.');
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    item = _ref1[_i];
    target = target[item] || (target[item] = {});
  }
  return block(target, top);
};

module('Scrundle', function(exports, top) {
  var Session, Views;
  Session = (function(_super) {

    __extends(Session, _super);

    function Session() {
      return Session.__super__.constructor.apply(this, arguments);
    }

    Session.prototype.isLoggedIn = function() {};

    return Session;

  })(Backbone.Model);
  exports.Views = Views = {};
  Views.NavBar = (function(_super) {

    __extends(NavBar, _super);

    function NavBar() {
      return NavBar.__super__.constructor.apply(this, arguments);
    }

    NavBar.prototype.el = $('.navbar');

    NavBar.prototype.menuTemplate = function() {
      li({
        "class": 'divider-vertical'
      });
      return li({
        "class": 'dropdown'
      }, function() {
        a({
          href: 'dropdown-toggle',
          'data-toggle': 'dropdown'
        }, function() {
          img({
            src: "" + (this.getIconUrl())
          });
          text(" " + (this.getName()) + " ");
          return b({
            "class": 'caret'
          });
        });
        return ul({
          "class": 'dropdown-menu'
        }, function() {
          return li(function() {
            return a({
              href: '/logout'
            }, 'Sign out');
          });
        });
      });
    };

    NavBar.prototype.login = function(model) {
      this.model = model;
      return this.$('.user-info').html(ck.render(this.menuTemplate, this.model));
    };

    return NavBar;

  })(Backbone.View);
  Views.About = (function(_super) {

    __extends(About, _super);

    function About() {
      return About.__super__.constructor.apply(this, arguments);
    }

    About.prototype.tagName = 'section';

    About.prototype["class"] = 'about-view';

    About.prototype.template = function() {
      return div({
        "class": 'hero-unit title'
      }, function() {
        img({
          src: '/img/logo.svg'
        });
        return div({
          "class": 'row'
        }, function() {
          return div({
            "class": 'span9'
          }, function() {
            h1("Scrundle");
            p("Use my name like a verb and I'll order and bundle scripts in a nice package for you.");
            p("For example, to get jQuery + underscoreJS + backboneJS in order and save locally, just curl an instructional url, like this:");
            div({
              "class": 'code'
            }, function() {
              return span({
                "class": 'code terminal'
              }, function() {
                i({
                  "class": 'icon-chevron-right terminal-prompt'
                });
                text("&nbsp;");
                return span("curl http://scrundle.me/js/$/_/bb > bundle.js");
              });
            });
            p("I'll even provide you with a single page with docs for your scripts, available here:");
            div({
              "class": 'code'
            }, function() {
              return span({
                "class": 'link'
              }, function() {
                i({
                  "class": 'icon-book icon-large'
                });
                text(" ");
                return a({
                  href: '/#docs/$/_/bb',
                  target: '_blank'
                }, "http://scrundle.me/#docs/$/_/bb ");
              });
            });
            p("As you can see, you need to know the special codes for the scripts you want! So, I made a nice tool for you to find and select your scripts.");
            a({
              "class": 'btn btn-info',
              href: '#finder-view'
            }, 'Get Started!');
            return div({
              "class": 'container'
            }, function() {
              return div(function() {
                return p(function() {
                  text("Why am I doing this, ");
                  return a({
                    href: '#why'
                  }, 'you may ask?');
                });
              });
            });
          });
        });
      });
    };

    About.prototype.pullUp = function(cb) {
      var _this = this;
      return this.$el.slideUp(function() {
        _this.remove();
        return cb();
      });
    };

    About.prototype.pullDown = function(cb) {
      return this.$el.appendTo('.main').slideDown(cb);
    };

    About.prototype.render = function() {
      this.$el.html(ck.render(this.template));
      return this;
    };

    return About;

  })(Backbone.View);
  Views.Why = (function(_super) {

    __extends(Why, _super);

    function Why() {
      return Why.__super__.constructor.apply(this, arguments);
    }

    Why.prototype.tagName = 'div';

    Why.prototype.className = 'modal hide';

    Why.prototype.template = function() {
      div({
        "class": 'modal-header'
      }, function() {
        return h2('Why do I scrundle?');
      });
      div({
        "class": 'modal-body'
      }, function() {
        p('My creator got tired of hunting around, copying and pasting urls for every script he needed to quickly get familiar with a library or prototype an idea. So he made me to automate this tedious work for him. The process of learning and experimentation is easier.');
        h4('Would you like to help?');
        p('There are two ways you can:');
        return ol(function() {
          li('add new javascript urls to the library');
          return li(function() {
            text('make a quick donation to my creator');
            return form({
              action: "https://checkout.google.com/api/checkout/v2/checkoutForm/Merchant/302846056348109",
              id: "BB_BuyButtonForm",
              method: "post",
              name: "BB_BuyButtonForm",
              target: "_blank"
            }, function() {
              input({
                name: "item_name_1",
                type: "hidden",
                value: "scrundle donation"
              });
              input({
                name: "item_description_1",
                type: "hidden",
                value: ""
              });
              input({
                name: "item_quantity_1",
                type: "hidden",
                value: "1"
              });
              input({
                name: "item_price_1",
                type: "hidden",
                value: "2.0"
              });
              input({
                name: "item_currency_1",
                type: "hidden",
                value: "USD"
              });
              input({
                name: "shopping-cart.items.item-1.digital-content.url",
                type: "hidden",
                value: "http://scrundle.me"
              });
              input({
                name: "_charset_",
                type: "hidden",
                value: "utf-8"
              });
              return input({
                alt: "",
                src: "https://checkout.google.com/buttons/buy.gif?merchant_id=302846056348109&amp;w=121&amp;h=44&amp;style=white&amp;variant=text&amp;loc=en_US",
                type: "image"
              });
            });
          });
        });
      });
      return div({
        "class": 'modal-footer'
      }, function() {
        return button({
          "class": 'btn btn-success'
        }, 'close');
      });
    };

    Why.prototype.render = function() {
      this.$el.html(ck.render(this.template));
      return this;
    };

    Why.prototype.open = function() {
      return this.$el.modal('show');
    };

    return Why;

  })(Backbone.View);
  return exports.Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.initialize = function() {
      this.scripts = new Scrundle.Script.Collection();
      this.docs = new Scrundle.Script.Collection();
      return this.views = {
        navBar: new Scrundle.Views.NavBar(),
        about: new Scrundle.Views.About(),
        finder: new Scrundle.Script.Views.Finder({
          collection: this.scripts
        }),
        bundleView: new Scrundle.Script.Views.Bundle({
          collection: this.scripts
        }),
        whyView: new Scrundle.Views.Why(),
        docsView: new Scrundle.Script.Views.Docs({
          collection: this.docs
        })
      };
    };

    Router.prototype.closeViews = function() {
      var name, v, _ref, _results;
      _ref = this.views;
      _results = [];
      for (name in _ref) {
        v = _ref[name];
        if (name !== 'navBar') {
          _results.push(v.remove());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Router.prototype.routes = {
      '': 'home',
      'finder-view': 'finder',
      'why': 'why',
      'docs/*list': 'docs'
    };

    Router.prototype.home = function() {
      this.closeViews();
      this.scripts.reset();
      this.views.navBar.open('.main');
      return this.views.about.render().pullDown();
    };

    Router.prototype.finder = function() {
      var _this = this;
      return this.views.about.pullUp(function() {
        _this.views.finder.render().open('.main');
        _this.views.bundleView.render().open($('.main'));
        return _this.scripts.fetch({
          add: true,
          success: function() {
            _this.views.finder.renderScripts();
            return _this.views.finder.$('.search').focus();
          }
        });
      });
    };

    Router.prototype.why = function() {
      return this.views.whyView.remove().render().open();
    };

    Router.prototype.docs = function(list) {
      var _this = this;
      this.closeViews();
      this.views.navBar.remove();
      return this.docs.fetch({
        list: list.split('/'),
        success: function() {
          return _this.views.docsView.render().open('body');
        }
      });
    };

    return Router;

  })(Backbone.Router);
});

module('Scrundle.Script', function(exports, top) {
  var Collection, Model, Views, scriptReadSync;
  exports.scriptReadSync = scriptReadSync = function(method, model, options) {
    var io, _ref;
    if ((_ref = this.io) == null) {
      this.io = window.sock;
    }
    console.log('sync: ', method, model, options);
    if (method === 'read') {
      this.io.emit('script', {
        method: method,
        id: model.id,
        options: options
      });
      io = this.io;
      return this.io.on('script', function(method, data) {
        delete this.$events.script;
        return options.success(data);
      });
    }
  };
  Model = (function(_super) {
    var isCodeValid;

    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    Model.prototype.idAttribute = "_id";

    Model.prototype.defaults = {
      selected: false,
      uses: 0
    };

    Model.prototype.scriptReadSync = scriptReadSync;

    Model.prototype.sync = scriptReadSync;

    Model.prototype.isSelected = function() {
      return this.get('selected');
    };

    Model.prototype.select = function() {
      return this.set('selected', true);
    };

    Model.prototype.unSelect = function() {
      return this.set('selected', false);
    };

    isCodeValid = function(code, cb) {
      var _this = this;
      this.io.emit('script', {
        method: 'codeExists',
        code: code
      }, function(script) {});
      this.codeValid = (!(typeof script !== "undefined" && script !== null)) || (script._id === this.id);
      return cb(this.codeValid);
    };

    return Model;

  })(Backbone.Model);
  Collection = (function(_super) {

    __extends(Collection, _super);

    function Collection() {
      return Collection.__super__.constructor.apply(this, arguments);
    }

    Collection.prototype.model = Model;

    Collection.prototype.sync = scriptReadSync;

    Collection.prototype.comparator = function(s) {
      var selOrder;
      if ((selOrder = s.get('selected')) > 0) {
        return selOrder;
      } else {
        return 0 - parseInt(s.get('uses'), 10);
      }
    };

    Collection.prototype.clearNonSelected = function() {
      return this.remove(this.getUnSelected());
    };

    Collection.prototype.selectAll = function() {
      return this.invoke('select');
    };

    Collection.prototype.getUnSelected = function() {
      return this.filter(function(s) {
        return !s.get('selected');
      });
    };

    Collection.prototype.getSelected = function() {
      return this.filter(function(s) {
        return s.get('selected');
      });
    };

    Collection.prototype.getSelectedCodes = function() {
      return _.map(this.getSelected(), function(s) {
        return s.get('code');
      });
    };

    Collection.prototype.getUrl = function() {
      return "http://scrundle.me/js/" + (this.getSelectedCodes().join('/'));
    };

    Collection.prototype.getPath = function() {
      return "/js/" + (this.getSelectedCodes().join('/'));
    };

    Collection.prototype.parse = function(resp) {
      var filtered,
        _this = this;
      filtered = _.filter(resp, function(s) {
        var alreadyExists;
        return alreadyExists = !(_this.where({
          code: s.code
        })).length;
      });
      return filtered;
    };

    Collection.prototype.selectedCount = function() {
      return (this.filter(function(s) {
        return s.get('selected');
      })).length;
    };

    Collection.prototype.nonSelectedCount = function() {
      return this.length - this.selectedCount();
    };

    return Collection;

  })(Backbone.Collection);
  exports.Model = Model;
  exports.Collection = Collection;
  exports.Views = Views = {};
  Views.ListItem = (function(_super) {

    __extends(ListItem, _super);

    function ListItem() {
      return ListItem.__super__.constructor.apply(this, arguments);
    }

    ListItem.prototype.tagName = 'tr';

    ListItem.prototype.className = 'script-view';

    ListItem.prototype.initialize = function() {};

    ListItem.prototype.events = {
      'click .select-btn': 'toggleSelect'
    };

    ListItem.prototype.template = function() {
      if (this.model.get('selected')) {
        td({
          "class": 'select-btn'
        }, function() {
          return span({
            "class": 'icn left'
          }, function() {
            return i({
              "class": 'icon-chevron-left'
            });
          });
        });
      }
      td({
        "class": 'code'
      }, function() {
        return span({
          "class": "label" + (this.model.isSelected() ? ' label-info' : '')
        }, "" + (this.model.get('code')));
      });
      td("" + (this.model.get('title')));
      td("" + (this.model.get('description')));
      if (!this.model.get('selected')) {
        return td({
          "class": 'select-btn'
        }, function() {
          return span({
            "class": 'icn right'
          }, function() {
            return i({
              "class": 'icon-chevron-right'
            });
          });
        });
      }
    };

    ListItem.prototype.toggleSelect = function() {
      this.model.set('selected', !this.model.get('selected'));
      return console.log('clicked: ', this.model);
    };

    ListItem.prototype.render = function() {
      this.$el.html(ck.render(this.template, this));
      this.$el.attr('id', this.model.id);
      return this;
    };

    return ListItem;

  })(Backbone.View);
  Views.Finder = (function(_super) {

    __extends(Finder, _super);

    function Finder() {
      return Finder.__super__.constructor.apply(this, arguments);
    }

    Finder.prototype.tagName = 'section';

    Finder.prototype.id = 'finder-view';

    Finder.prototype.initialize = function() {
      var _this = this;
      this.collection.on('change', function(s) {
        if (s.isSelected()) {
          return _this.select(s);
        } else {
          return _this.unSelect(s);
        }
      });
      return this.collection.on('remove', function(s) {
        return s.view.remove();
      });
    };

    Finder.prototype.events = {
      'keyup .search': 'setSearchTimer',
      'blur .search': function() {
        return this.$('.add-btn')[0].focus();
      },
      'keydown .add-btn': 'selectAll',
      'click .add-btn': 'selectAll'
    };

    Finder.prototype.template = function() {
      return div({
        "class": 'row'
      }, function() {
        div({
          "class": 'span6 pull-left search-cont'
        }, function() {
          div('page-header', function() {
            return h2(function() {
              span({
                "class": 'icon-search icon-large steps'
              });
              return text(' Find and select scripts.');
            });
          });
          div({
            "class": 'control-group'
          }, function() {
            return div({
              "class": 'controls search-control'
            }, function() {
              return div({
                "class": 'input-prepend'
              }, function() {
                span({
                  "class": 'add-on'
                }, function() {
                  i({
                    "class": 'icon-search'
                  });
                  return img({
                    "class": 'wait',
                    src: '/img/wait.gif'
                  });
                });
                input({
                  "class": 'span3 search',
                  type: 'text',
                  placeholder: 'find scripts to bundle',
                  tabindex: 1
                });
                return a({
                  "class": 'btn add-btn btn-info',
                  tabindex: 2
                }, function() {
                  text('&darr; add all these  ');
                  return i({
                    "class": 'icon-white icon-chevron-right'
                  });
                });
              });
            });
          });
          return div({
            "class": 'script-list-cont'
          }, function() {
            return table({
              "class": 'table'
            }, function() {
              return tbody(function() {});
            });
          });
        });
        return div({
          "class": 'span6 pull-right selected-cont'
        }, function() {
          div({
            "class": 'page-header'
          }, function() {
            return h2(function() {
              span({
                "class": 'icon-reorder icon-large steps'
              });
              return text(' Put them in order.');
            });
          });
          return div({
            "class": 'selected-list-cont'
          }, function() {
            return table({
              "class": 'table'
            }, function() {
              thead(function() {
                return tr(function() {
                  return th({
                    colspan: 4,
                    "class": 'count'
                  }, "&larr; Find some scripts!");
                });
              });
              return tbody(function() {});
            });
          });
        });
      });
    };

    Finder.prototype.selectAll = function(e) {
      var _ref;
      if ((_ref = e.which) === 13 || _ref === 1) {
        this.collection.selectAll();
        this.$('.search').select().val('').keyup();
        this.$('.add-btn').hide();
        return this;
      }
    };

    Finder.prototype.setSearchTimer = function(e) {
      var _this = this;
      clearInterval(this.searchTimer);
      switch (e.which) {
        case 13:
          return this.doSearch(e);
        case 27:
          $(e.target).val('');
          $(e.target).focus();
          return this.doSearch(e);
        default:
          return this.searchTimer = wait(300, function() {
            return _this.doSearch(e);
          });
      }
    };

    Finder.prototype.doSearch = function(e) {
      var query,
        _this = this;
      this.$('.input-prepend .icon-search').hide();
      $('img.wait').show();
      clearInterval(this.searchTimer);
      query = $(e.target).val();
      console.log('doing query: ', query);
      this.collection.clearNonSelected();
      this.collection.fetch({
        add: true,
        query: query,
        success: function() {
          console.log('fetch success');
          _this.renderScripts();
          _this.$('.input-prepend .icon-search').show();
          return _this.$('img.wait').hide();
        }
      });
      if ($(e.target).val()) {
        return this.$('.add-btn').show();
      } else {
        return this.$('.add-btn').hide();
      }
    };

    Finder.prototype.updateSelected = function() {
      var cnt;
      cnt = this.collection.selectedCount();
      if (cnt) {
        this.$('.selected-cont').fadeIn();
        this.$('.count').html(ck.render(function() {
          text('You have ');
          span({
            "class": 'label label-info'
          }, "" + this);
          return text(" bundled script" + (this > 1 ? 's' : '') + ". Drag to order.");
        }, cnt));
      } else {
        this.$('.selected-cont').fadeOut();
      }
      return this.setScriptOrder();
    };

    Finder.prototype.unSelect = function(s) {
      s.view.remove().render().$el.prependTo(this.$('.script-list-cont tbody'));
      s.view.delegateEvents();
      this.updateSelected();
      return this;
    };

    Finder.prototype.select = function(s) {
      s.view.remove().render().$el.appendTo(this.$('.selected-list-cont tbody'));
      s.view.delegateEvents();
      this.updateSelected();
      return this;
    };

    Finder.prototype.addScript = function(s) {
      var _ref;
      if ((_ref = s.view) == null) {
        s.view = new Views.ListItem({
          model: s
        });
      }
      s.view.remove().render().$el.appendTo(this.$('.script-list-cont tbody'));
      return s.view.delegateEvents();
    };

    Finder.prototype.renderScripts = function() {
      var s, _i, _len, _ref;
      _ref = this.collection.getUnSelected();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        this.addScript(s);
      }
      return this;
    };

    Finder.prototype.setScriptOrder = function() {
      var i, id, idsInOrder, _i, _len;
      idsInOrder = _.compact(_.map(this.$('.selected-list-cont tr'), function(i) {
        return $(i).attr('id');
      }));
      for (i = _i = 0, _len = idsInOrder.length; _i < _len; i = ++_i) {
        id = idsInOrder[i];
        this.collection.get(id).set('selected', i + 1, {
          silent: true
        });
        this.collection.sort({
          silent: true
        });
      }
      return this.collection.trigger('change:selectedCodes');
    };

    Finder.prototype.render = function() {
      var fixHelper,
        _this = this;
      this.$el.html(ck.render(this.template));
      fixHelper = function(e, ui) {
        ui.children().each(function() {
          return $(this).width($(this).width());
        });
        return ui;
      };
      this.$('.selected-list-cont tbody').sortable({
        items: 'tr',
        helper: fixHelper,
        cursor: 'move',
        update: function(ev, ui) {
          return _this.setScriptOrder();
        }
      }).disableSelection();
      this.delegateEvents();
      return this;
    };

    return Finder;

  })(Backbone.View);
  Views.Bundle = (function(_super) {

    __extends(Bundle, _super);

    function Bundle() {
      return Bundle.__super__.constructor.apply(this, arguments);
    }

    Bundle.prototype.tagName = 'section';

    Bundle.prototype.id = 'bundle-view';

    Bundle.prototype.initialize = function() {
      var _this = this;
      this.connectSocket();
      this.io.on('scrundle:source', function(src) {
        _this.$('.progress').hide();
        _this.$('.src').text(src);
        return _this.$('.src-view').slideDown();
      });
      this.io.on('scrundle:progress', function(count) {
        var prog, scriptCount;
        scriptCount = _this.collection.getSelectedCodes().length;
        console.log('prog: ', prog = Math.floor(100 * count / scriptCount));
        return _this.$('.progress .bar').css('width', "" + prog + "%");
      });
      return this.collection.on('change:selectedCodes', function() {
        return _this.render();
      });
    };

    Bundle.prototype.events = {
      'click code, pre': 'selectCode',
      'click .loadSrc': 'loadSource'
    };

    Bundle.prototype.loadSource = function() {
      console.log(this.collection.getSelectedCodes());
      this.io.emit('scrundle', this.collection.getSelectedCodes());
      this.$('.loadSrc').hide();
      return this.$('.progress').show().slideDown({
        direction: 'left'
      });
    };

    Bundle.prototype.selectCode = function(e) {
      return this.$(e.target).selectText();
    };

    Bundle.prototype.template = function() {
      div({
        "class": 'page-header'
      }, function() {
        return h2(function() {
          span({
            "class": 'icon-briefcase icon-large steps'
          });
          return text(' Get your script bundle.');
        });
      });
      div({
        "class": 'row command-view'
      }, function() {
        var selected;
        if ((selected = this.collection.getSelected()).length) {
          return div({
            "class": 'span9'
          }, function() {
            h4({
              "class": ''
            }, 'Download it from the command line:');
            pre({
              "class": 'code terminal'
            }, function() {
              i({
                "class": 'icon-chevron-right'
              });
              text("&nbsp;");
              return span({
                "class": 'curl'
              }, "curl " + (this.collection.getUrl()) + " > bundle.js");
            });
            div;

            button({
              "class": 'btn btn-info loadSrc'
            }, 'or scrundle it here &darr;');
            return div({
              "class": 'progress progress-striped active span9'
            }, function() {
              return div({
                "class": 'bar',
                style: 'width: 0%'
              });
            });
          });
        }
      });
      return div({
        "class": 'row src-view'
      }, function() {
        div({
          "class": 'span9 pull-left'
        }, function() {
          return pre({
            "class": 'pre-scrollable src'
          });
        });
        return div({
          "class": 'logo span3 pull-right'
        }, function() {
          return img({
            src: '/img/logo.svg'
          });
        });
      });
    };

    Bundle.prototype.render = function() {
      this.$el.html(ck.render(this.template, this));
      if (this.collection.selectedCount()) {
        this.$el.fadeIn();
      } else {
        this.$el.fadeOut();
      }
      this.delegateEvents();
      return this;
    };

    return Bundle;

  })(Backbone.View);
  return Views.Docs = (function(_super) {

    __extends(Docs, _super);

    function Docs() {
      return Docs.__super__.constructor.apply(this, arguments);
    }

    Docs.prototype.tagName = 'div';

    Docs.prototype.className = 'docs';

    Docs.prototype.events = {
      'click .doc.btn': function(e) {
        console.log('click', e);
        this.$('.doc').removeClass('btn-info');
        $(e.target).addClass('btn-info');
        return this.loadUrl($(e.target).attr('data-code'), $(e.target).attr('data-url'));
      }
    };

    Docs.prototype.loadUrl = function(code, url) {
      this.code = code;
      this.url = url;
      console.log(this.url);
      return this.$('iframe').attr('src', this.url);
    };

    Docs.prototype.template = function() {
      return div({
        "class": 'tabbable tabs-left left-bar '
      }, function() {
        ul({
          "class": 'nav nav-tabs'
        }, function() {
          li(function() {
            return a({
              "class": '',
              href: '/'
            }, function() {
              return img({
                src: '/img/logo.svg'
              });
            });
          });
          return this.each(function(scr, i) {
            return li(function() {
              return a({
                "class": 'doc',
                href: "#" + scr.id,
                'data-toggle': 'tab'
              }, "" + (scr.get('code')));
            });
          });
        });
        return div({
          "class": 'tab-content'
        }, function() {
          return this.each(function(scr, i) {
            return div({
              "class": "tab-pane" + (i === 0 ? ' active' : ''),
              id: "" + scr.id
            }, function() {
              return iframe({
                "class": 'with-left-bar',
                src: "" + (scr.get('docs')),
                frameborder: '0'
              });
            });
          });
        });
      });
    };

    Docs.prototype.template2 = function() {
      var _ref;
      iframe({
        "class": 'with-float-bar',
        src: "" + ((_ref = this.url) != null ? _ref : this.url = this.first().get('docs')),
        frameborder: '0'
      }, function() {});
      return div({
        "class": 'btn-group docs-bar'
      }, function() {
        span({
          "class": 'btn handle'
        }, function() {
          return i({
            "class": 'icon-move'
          });
        });
        a({
          "class": 'btn doc',
          href: '/'
        }, function() {
          return img({
            src: '/img/logo.svg'
          });
        });
        return this.each(function(scr, i) {
          return button({
            "class": "btn doc" + (i === 0 ? ' btn-info' : ''),
            'data-code': "" + (scr.get('code')) + " ",
            'data-url': "" + (scr.get('docs'))
          }, "" + (scr.get('code')) + " ");
        });
      });
    };

    Docs.prototype.render = function() {
      this.$el.html(ck.render(this.template, this.collection));
      this.$('a.doc').click(function(e) {
        console.log('click', $(e.target));
        e.preventDefault();
        return $(e.target).tab('show');
      });
      this.$('a.doc:first').tab('show');
      /*
            @$('.docs-bar').draggable({
              handle: '.handle'
              iframeFix: true
            }).css({ position: 'absolute', bottom: '10px', right: '10px' })
      */

      this.delegateEvents();
      return this;
    };

    return Docs;

  })(Backbone.View);
});

$(function() {
  var _ref;
  if ((_ref = Scrundle.app) == null) {
    Scrundle.app = new Scrundle.Router();
  }
  return Backbone.history.start();
});
