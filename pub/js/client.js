// Generated by CoffeeScript 1.3.3
(function() {
  var BundleView, Finder, NavBar, Router, Script, ScriptView, Scripts, w,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  w = window;

  w.sock = w.io.connect('http://localhost:4444');

  $.fn.selectText = function() {
    var range, selection, text;
    text = $(this)[0];
    if ($.browser.msie) {
      range = document.body.createTextRange();
      range.moveToElementText(text);
      return range.select();
    } else if ($.browser.mozilla || $.browser.opera) {
      selection = window.getSelection();
      range = document.createRange();
      range.selectNodeContents(text);
      selection.removeAllRanges();
      return selection.addRange(range);
    } else if ($.browser.safari) {
      selection = window.getSelection();
      return selection.setBaseAndExtent(text, 0, text, 1);
    }
  };

  w.wait = function(someTime, thenDo) {
    return setTimeout(thenDo, someTime);
  };

  w.doEvery = function(someTime, action) {
    return setInterval(action, someTime);
  };

  Backbone.Model.prototype.connectSocket = Backbone.View.prototype.connectSocket = function() {
    var _ref;
    return (_ref = this.io) != null ? _ref : this.io = window.sock;
  };

  Backbone.sync = function(method, model, options) {
    var io, _ref;
    if ((_ref = this.io) == null) {
      this.io = window.sock;
    }
    this.io.emit('script', {
      method: method,
      id: model.id != null,
      options: options
    });
    io = this.io;
    return this.io.on('script', function(method, data) {
      console.log('recvd: ', data);
      delete this.$events.script;
      return options.success(data);
    });
  };

  Script = (function(_super) {

    __extends(Script, _super);

    function Script() {
      return Script.__super__.constructor.apply(this, arguments);
    }

    Script.prototype.initialize = function() {
      return this.id = this.attributes.code;
    };

    Script.prototype.defaults = {
      selected: false
    };

    Script.prototype.isSelected = function() {
      return this.get('selected');
    };

    Script.prototype.select = function() {
      return this.set('selected', true);
    };

    Script.prototype.unSelect = function() {
      return this.set('selected', false);
    };

    return Script;

  })(Backbone.Model);

  Scripts = (function(_super) {

    __extends(Scripts, _super);

    function Scripts() {
      return Scripts.__super__.constructor.apply(this, arguments);
    }

    Scripts.prototype.model = Script;

    Scripts.prototype.comparator = function(s) {
      return s.get('uses');
    };

    Scripts.prototype.clearNonSelected = function() {
      return this.remove(this.getUnSelected());
    };

    Scripts.prototype.selectAll = function() {
      return this.invoke('select');
    };

    Scripts.prototype.getUnSelected = function() {
      return this.filter(function(s) {
        return !s.get('selected');
      });
    };

    Scripts.prototype.getSelected = function() {
      return this.filter(function(s) {
        return s.get('selected');
      });
    };

    Scripts.prototype.getSelectedCodes = function() {
      return _.map(this.getSelected(), function(s) {
        return s.get('code');
      });
    };

    Scripts.prototype.getUrl = function() {
      return "http://scrundle.me/" + (this.selectedCodes.join('/'));
    };

    Scripts.prototype.getPath = function() {
      return this.selectedCodes.join('/');
    };

    Scripts.prototype.parse = function(resp) {
      var filtered,
        _this = this;
      console.log('fetched: ', resp);
      filtered = _.filter(resp, function(s) {
        var alreadyExists;
        alreadyExists = !(_this.where({
          code: s.code
        })).length;
        return alreadyExists;
      });
      console.log('filtered', filtered);
      return filtered;
    };

    Scripts.prototype.selectedCount = function() {
      return (this.filter(function(s) {
        return s.get('selected');
      })).length;
    };

    Scripts.prototype.nonSelectedCount = function() {
      return this.length - this.selectedCount();
    };

    return Scripts;

  })(Backbone.Collection);

  Backbone.View.prototype.open = function(cont) {
    if (cont == null) {
      cont = '.main';
    }
    this.$el.appendTo(cont);
    return this;
  };

  NavBar = (function(_super) {

    __extends(NavBar, _super);

    function NavBar() {
      return NavBar.__super__.constructor.apply(this, arguments);
    }

    NavBar.prototype.tagName = 'div';

    NavBar.prototype.className = 'navbar navbar-fixed-top';

    NavBar.prototype.template = function() {
      return div({
        "class": 'navbar-inner'
      }, function() {
        return div({
          "class": 'container'
        }, function() {
          a({
            "class": 'brand'
          }, 'scrundle.me');
          return ul({
            "class": 'nav'
          }, function() {
            li(function() {
              return a({
                href: '#'
              }, 'About');
            });
            li(function() {
              return a({
                href: '#finder-view'
              }, 'Bundle Scripts');
            });
            return li(function() {
              return a({
                href: '#add-scripts'
              }, 'Add New Scripts');
            });
          });
        });
      });
    };

    NavBar.prototype.render = function() {
      this.$el.html(ck.render(this.template));
      return this;
    };

    return NavBar;

  })(Backbone.View);

  ScriptView = (function(_super) {

    __extends(ScriptView, _super);

    function ScriptView() {
      return ScriptView.__super__.constructor.apply(this, arguments);
    }

    ScriptView.prototype.tagName = 'tr';

    ScriptView.prototype.className = 'script-view';

    ScriptView.prototype.initialize = function() {};

    ScriptView.prototype.events = {
      'click .select-btn': 'toggleSelect'
    };

    ScriptView.prototype.template = function() {
      if (this.model.get('selected')) {
        td({
          "class": 'select-btn'
        }, function() {
          return span({
            "class": 'icn left'
          }, function() {
            return i({
              "class": 'icon-chevron-left'
            });
          });
        });
      }
      td({
        "class": 'code'
      }, function() {
        return span({
          "class": 'label'
        }, "" + (this.model.get('code')));
      });
      td("" + (this.model.get('title')));
      td("" + (this.model.get('description')));
      if (!this.model.get('selected')) {
        return td({
          "class": 'select-btn'
        }, function() {
          return span({
            "class": 'icn right'
          }, function() {
            return i({
              "class": 'icon-chevron-right'
            });
          });
        });
      }
    };

    ScriptView.prototype.toggleSelect = function() {
      this.model.set('selected', !this.model.get('selected'));
      return console.log('clicked: ', this.model);
    };

    ScriptView.prototype.render = function() {
      this.$el.html(ck.render(this.template, this));
      return this;
    };

    return ScriptView;

  })(Backbone.View);

  Finder = (function(_super) {

    __extends(Finder, _super);

    function Finder() {
      return Finder.__super__.constructor.apply(this, arguments);
    }

    Finder.prototype.tagName = 'section';

    Finder.prototype.id = 'finder-view';

    Finder.prototype.initialize = function() {
      var _this = this;
      this.collection.on('change', function(s) {
        if (s.isSelected()) {
          return _this.select(s);
        } else {
          return _this.unSelect(s);
        }
      });
      return this.collection.on('remove', function(s) {
        return s.view.remove();
      });
    };

    Finder.prototype.events = {
      'keyup .search': 'setSearchTimer',
      'blur .search': function() {
        return this.$('.add-btn')[0].focus();
      },
      'keydown .add-btn': 'selectAll',
      'click .add-btn': 'selectAll'
    };

    Finder.prototype.selectAll = function(e) {
      var _ref;
      if ((_ref = e.which) === 13 || _ref === 1) {
        this.collection.selectAll();
        this.$('.search').select().val('').keyup();
        this.$('.add-btn').hide();
        return this;
      }
    };

    Finder.prototype.setSearchTimer = function(e) {
      var _this = this;
      clearInterval(this.searchTimer);
      switch (e.which) {
        case 13:
          return this.doSearch(e);
        case 27:
          $(e.target).val('');
          $(e.target).focus();
          return this.doSearch(e);
        default:
          return this.searchTimer = wait(300, function() {
            return _this.doSearch(e);
          });
      }
    };

    Finder.prototype.doSearch = function(e) {
      var query,
        _this = this;
      this.$('.icon-search').hide();
      this.$('img.wait').show();
      clearInterval(this.searchTimer);
      query = $(e.target).val();
      console.log('doing query: ', query);
      this.collection.clearNonSelected();
      this.collection.fetch({
        add: true,
        query: query,
        success: function() {
          _this.renderScripts();
          _this.$('.icon-search').show();
          return _this.$('img.wait').hide();
        }
      });
      if ($(e.target).val()) {
        return this.$('.add-btn').show();
      } else {
        return this.$('.add-btn').hide();
      }
    };

    Finder.prototype.template = function() {
      return div({
        "class": 'row'
      }, function() {
        div({
          "class": 'span6 pull-left'
        }, function() {
          div('page-header', function() {
            return h2(function() {
              span({
                "class": 'badge badge-info'
              }, '1');
              return text(' Find and select scripts.');
            });
          });
          div({
            "class": 'control-group'
          }, function() {
            return div({
              "class": 'controls search-control'
            }, function() {
              return div({
                "class": 'input-prepend'
              }, function() {
                span({
                  "class": 'add-on'
                }, function() {
                  i({
                    "class": 'icon-search'
                  });
                  return img({
                    "class": 'wait',
                    src: '/img/wait.gif'
                  });
                });
                input({
                  "class": 'span3 search',
                  type: 'text',
                  placeholder: 'find scripts to bundle',
                  tabindex: 1
                });
                return a({
                  "class": 'btn add-btn btn-info',
                  tabindex: 2
                }, function() {
                  text('add all these  ');
                  return i({
                    "class": 'icon-white icon-chevron-right'
                  });
                });
              });
            });
          });
          return div({
            "class": 'script-list-cont'
          }, function() {
            return table({
              "class": 'table'
            }, function() {
              return tbody(function() {});
            });
          });
        });
        return div({
          "class": 'span6 pull-right'
        }, function() {
          div({
            "class": 'page-header'
          }, function() {
            return h2(function() {
              span({
                "class": 'badge badge-info'
              }, '2');
              return text(' Put them in order.');
            });
          });
          return div({
            "class": 'selected-cont'
          }, function() {
            return div({
              "class": 'selected-list-cont'
            }, function() {
              return table({
                "class": 'table'
              }, function() {
                return tbody(function() {});
              });
            });
          });
        });
      });
    };

    Finder.prototype.unSelect = function(s) {
      s.view.remove().render().$el.prependTo(this.$('.script-list-cont tbody'));
      s.view.delegateEvents();
      this.setSelectedCodes();
      return this;
    };

    Finder.prototype.select = function(s) {
      s.view.remove().render().$el.appendTo(this.$('.selected-list-cont tbody'));
      s.view.delegateEvents();
      this.setSelectedCodes();
      return this;
    };

    Finder.prototype.addScript = function(s) {
      var _ref;
      if ((_ref = s.view) == null) {
        s.view = new ScriptView({
          model: s
        });
      }
      s.view.remove().render().$el.appendTo(this.$('.script-list-cont tbody'));
      return s.view.delegateEvents();
    };

    Finder.prototype.renderScripts = function() {
      var s, _i, _len, _ref;
      _ref = this.collection.getUnSelected();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        this.addScript(s);
      }
      return this;
    };

    Finder.prototype.render = function() {
      var fixHelper,
        _this = this;
      this.$el.html(ck.render(this.template));
      fixHelper = function(e, ui) {
        ui.children().each(function() {
          return $(this).width($(this).width());
        });
        return ui;
      };
      this.$('.selected-list-cont tbody').sortable({
        items: 'tr',
        helper: fixHelper,
        cursor: 'move',
        update: function() {
          return _this.setSelectedCodes();
        }
      }).disableSelection();
      return this;
    };

    Finder.prototype.setSelectedCodes = function() {
      this.collection.selectedCodes = _.map($('.selected-list-cont .code .label'), function(el) {
        return $(el).text();
      });
      return this.collection.trigger('change:selectedCodes');
    };

    return Finder;

  })(Backbone.View);

  BundleView = (function(_super) {

    __extends(BundleView, _super);

    function BundleView() {
      return BundleView.__super__.constructor.apply(this, arguments);
    }

    BundleView.prototype.tagName = 'section';

    BundleView.prototype.id = 'bundle-view';

    BundleView.prototype.initialize = function() {
      var _this = this;
      this.connectSocket();
      this.io.on('scrundle:source', function(src) {
        _this.$('.progress').hide();
        _this.$('.src').text(src);
        return _this.$('.src-view').slideDown();
      });
      return this.io.on('scrundle:progress', function(count) {
        var prog, scriptCount;
        scriptCount = _this.collection.getSelectedCodes().length;
        console.log('prog: ', prog = Math.floor(100 * count / scriptCount));
        return _this.$('.progress .bar').css('width', "" + prog + "%");
      });
    };

    BundleView.prototype.events = {
      'click code, pre': 'selectCode',
      'click .loadSrc': 'loadSource'
    };

    BundleView.prototype.loadSource = function() {
      this.io.emit('scrundle', this.collection.getSelectedCodes());
      this.$('.loadSrc').hide();
      return this.$('.progress').show().slideDown({
        direction: 'left'
      });
    };

    BundleView.prototype.selectCode = function(e) {
      return this.$(e.target).selectText();
    };

    BundleView.prototype.template = function() {
      div({
        "class": 'page-header'
      }, function() {
        return h2(function() {
          span({
            "class": 'badge badge-info'
          }, '3');
          return text(' Get your script bundle.');
        });
      });
      div({
        "class": 'row command-view'
      }, function() {
        return div({
          "class": 'span6'
        }, function() {
          var selected;
          if ((selected = this.collection.getSelected()).length) {
            return div({
              "class": 'span9'
            }, function() {
              h4({
                "class": ''
              }, 'Download it from the command line:');
              code({
                "class": 'code curl pull-left span9'
              }, "curl " + (this.collection.getUrl()) + " > bundle.js");
              button({
                "class": 'btn btn-info loadSrc'
              }, 'or scrundle it here &darr;');
              return div({
                "class": 'progress progress-striped active span9'
              }, function() {
                return div({
                  "class": 'bar',
                  style: 'width: 0%'
                });
              });
            });
          }
        });
      });
      return div({
        "class": 'row src-view'
      }, function() {
        div({
          "class": 'span9 pull-left'
        }, function() {
          return pre({
            "class": 'pre-scrollable src'
          });
        });
        return div({
          "class": 'logo span3 pull-right'
        }, function() {
          return img({
            src: '/img/logo.svg'
          });
        });
      });
    };

    BundleView.prototype.render = function() {
      this.$el.html(ck.render(this.template, this));
      return this;
    };

    return BundleView;

  })(Backbone.View);

  Router = (function(_super) {

    __extends(Router, _super);

    function Router() {
      return Router.__super__.constructor.apply(this, arguments);
    }

    Router.prototype.initialize = function() {
      return this.scripts = new Scripts();
    };

    Router.prototype.routes = {
      '': 'home'
    };

    Router.prototype.home = function() {
      var navBar,
        _this = this;
      navBar = (new NavBar()).render().open('body');
      this.finder = new Finder({
        collection: this.scripts
      });
      this.finder.render().open('.main');
      this.bundleView = new BundleView({
        collection: this.scripts
      });
      this.bundleView.render().open('.main');
      this.scripts.fetch({
        add: true,
        success: function() {
          return _this.finder.renderScripts();
        }
      });
      return this.scripts.on('change:selectedCodes', function() {
        return _this.bundleView.render();
      });
    };

    return Router;

  })(Backbone.Router);

  w.app = new Router();

  w.ck = CoffeeKup;

  $(function() {
    Backbone.history.start();
    return typeof console !== "undefined" && console !== null ? console.log('jquery loaded') : void 0;
  });

}).call(this);
