// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module('Scrundle.User', function(exports, top) {
  var Model;
  Model = (function(_super) {

    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    Model.prototype.getName = function() {
      return this.get('twit').name;
    };

    Model.prototype.getIconUrl = function() {
      return this.get('twit').profileImageUrl;
    };

    return Model;

  })(Backbone.Model);
  return exports.Model = Model;
});

Scrundle.Script.Views.Edit = (function(_super) {

  __extends(Edit, _super);

  function Edit() {
    return Edit.__super__.constructor.apply(this, arguments);
  }

  Edit.prototype.tagName = 'div';

  Edit.prototype.className = 'edit-view modal hide';

  Edit.prototype.urlTemplate = function() {
    return fieldset({
      "class": 'control-group'
    }, function() {
      return input({
        type: 'text',
        "class": 'span2',
        placeholder: 'script url'
      });
    });
  };

  Edit.prototype.events = {
    'keyup input.title, input.code': function() {
      this.updateTitle();
      return this.checkCode();
    }
  };

  Edit.prototype.checkCode = function() {
    var codeError,
      _this = this;
    codeError = function(errText) {
      if (errText) {
        this.$('.control-group.code').addClass('error');
      } else {
        this.$('.control-group.code').removeClass('error');
      }
      this.$('.code .help-block').text(errText);
      return errText;
    };
    if (this.$('input.code').val() === '') {
      return codeError('You must enter a code.');
    } else {
      return this.model.isCodeValid(this.$('input.code').val(), function(codeAvailable) {
        var alreadyExists;
        console.log(codeAvailable);
        alreadyExists = !codeAvailable;
        if (alreadyExists) {
          return codeError('This code already exists. Try another');
        } else {
          return codeError('');
        }
      });
    }
  };

  Edit.prototype.updateTitle = function(e) {
    var code, _ref;
    this.$('.title-label').text((_ref = this.$('input.title').val()) != null ? _ref : 'New script');
    return this.$('.code-label').text((code = this.$('input.code').val()) ? " (" + code + ")" : '');
  };

  Edit.prototype.template = function() {
    div({
      "class": 'modal-header'
    }, function() {
      return h3(function() {
        var code, _ref;
        span({
          "class": 'title-label'
        }, "" + ((_ref = this.get('title')) != null ? _ref : 'New script'));
        if ((code = this.get('code')) != null) {
          return span({
            "class": 'code-label'
          }, " (" + code + ")");
        }
      });
    });
    div({
      "class": 'modal-body'
    }, function() {
      return form({
        "class": 'edit-form form-inline'
      }, function() {
        fieldset({
          "class": 'control-group code'
        }, function() {
          return div({
            "class": 'controls'
          }, function() {
            var _ref;
            input({
              type: 'text',
              "class": 'code span1',
              placeholder: 'code',
              value: "" + ((_ref = this.get('code')) != null ? _ref : '')
            });
            return p({
              "class": 'help-block'
            });
          });
        });
        fieldset({
          "class": 'control-group title'
        }, function() {
          return div({
            "class": 'controls'
          }, function() {
            var _ref;
            return input({
              type: 'text',
              "class": 'title span3',
              placeholder: 'title',
              value: "" + ((_ref = this.get('title')) != null ? _ref : '')
            });
          });
        });
        return fieldset({
          "class": 'control-group'
        }, function() {
          var _ref;
          return textarea({
            "class": 'description',
            placeholder: 'script description...'
          }, "" + ((_ref = this.get('description')) != null ? _ref : ''));
        });
      });
    });
    return div({
      "class": 'modal-footer'
    }, function() {
      return button({
        "class": 'btn btn-success save'
      }, 'save');
    });
  };

  Edit.prototype.render = function() {
    this.$el.html(ck.render(this.template, this.model));
    return this;
  };

  Edit.prototype.open = function() {
    this.$el.modal('show');
    this.delegateEvents();
    return this;
  };

  return Edit;

})(Backbone.View);

$(function() {
  Scrundle.app.views.editView = new Scrundle.Script.Views.Edit();
  Scrundle.app.user = new Scrundle.User.Model(window.user);
  Scrundle.app.session = window.session;
  Scrundle.app.views.navBar.login(Scrundle.app.user);
  return Scrundle.app.route('edit/:id', 'editOne', function(code) {
    var _this = this;
    this.closeViews();
    this.views.editView.model = new Scrundle.Script.Model();
    if (code) {
      this.views.editView.model.fetch({
        code: code,
        success: function() {
          console.log(_this.views.editView.model);
          return _this.views.editView.render().open('body');
        },
        error: function() {
          alert('no code by that name');
          return _this.navigate('/', true);
        }
      });
    } else {
      this.views.editView.render().open('body');
    }
    return this;
  });
});
