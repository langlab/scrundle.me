// Generated by CoffeeScript 1.3.3
(function() {
  var EditView, User,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  User = (function(_super) {

    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.getName = function() {
      return this.get('twit').name;
    };

    User.prototype.getIconUrl = function() {
      return this.get('twit').profileImageUrl;
    };

    return User;

  })(Backbone.Model);

  EditView = (function(_super) {

    __extends(EditView, _super);

    function EditView() {
      return EditView.__super__.constructor.apply(this, arguments);
    }

    EditView.prototype.tagName = 'div';

    EditView.prototype.className = 'edit-view modal hide';

    EditView.prototype.urlTemplate = function() {
      return fieldset({
        "class": 'control-group'
      }, function() {
        return input({
          type: 'text',
          "class": 'span2'
        }, placeholder);
      });
    };

    EditView.prototype.events = {
      'keyup input.title, input.code': 'updateTitle'
    };

    EditView.prototype.updateTitle = function(e) {
      var code, _ref;
      this.$('.title-label').text((_ref = this.$('.title').val()) != null ? _ref : 'New script');
      return this.$('.code-label').text((code = this.$('.code').val()) ? " (" + code + ")" : '');
    };

    EditView.prototype.template = function() {
      div({
        "class": 'modal-header'
      }, function() {
        return h3(function() {
          var code, _ref;
          span({
            "class": 'title-label'
          }, "" + ((_ref = this.get('title')) != null ? _ref : 'New script'));
          if ((code = this.get('code')) != null) {
            return span({
              "class": 'code-label'
            }, " (" + code + ")");
          }
        });
      });
      div({
        "class": 'modal-body'
      }, function() {
        return form({
          "class": 'edit-form form-inline'
        }, function() {
          fieldset({
            "class": 'control-group'
          }, function() {
            return div({
              "class": 'controls'
            }, function() {
              var _ref, _ref1;
              input({
                type: 'text',
                "class": 'code span1',
                placeholder: 'code',
                value: "" + ((_ref = this.get('code')) != null ? _ref : '')
              });
              input({
                type: 'text',
                "class": 'title span3',
                placeholder: 'title',
                value: "" + ((_ref1 = this.get('title')) != null ? _ref1 : '')
              });
              return p({
                "class": 'help-block'
              });
            });
          });
          return fieldset({
            "class": 'control-group'
          }, function() {
            var _ref;
            return textarea({
              "class": 'description',
              placeholder: 'script description...'
            }, "" + ((_ref = this.get('description')) != null ? _ref : ''));
          });
        });
      });
      return div({
        "class": 'modal-footer'
      }, function() {
        return button({
          "class": 'btn btn-success save'
        }, 'save');
      });
    };

    EditView.prototype.render = function() {
      this.$el.html(ck.render(this.template, this.model));
      return this;
    };

    EditView.prototype.open = function() {
      this.$el.modal('show');
      this.delegateEvents();
      return this;
    };

    return EditView;

  })(Backbone.View);

  $(function() {
    app.views.editView = new EditView();
    app.user = new User(window.user);
    app.views.navBar.login(app.user);
    return app.route('edit/:code', 'editOne', function(code) {
      var _this = this;
      this.closeViews();
      this.views.editView.model = new Script();
      if (code) {
        this.views.editView.model.fetch({
          code: code,
          success: function() {
            console.log(_this.views.editView.model);
            return _this.views.editView.render().open('body');
          },
          error: function() {
            alert('no code by that name');
            return _this.navigate('/', true);
          }
        });
      } else {
        this.views.editView.render().open('body');
      }
      return this;
    });
  });

}).call(this);
