// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

module('Scrundle.User.Script', function(exports) {
  var Collection, Model, Views, userSync;
  exports.Views = Views = {};
  userSync = function(method, model, options) {
    var _ref,
      _this = this;
    if ((_ref = this.io) == null) {
      this.io = window.sock;
    }
    console.log('myscript sync: ', method, model, options);
    return this.io.emit('myScript', {
      method: method,
      model: model,
      options: options
    }, function(response) {
      return options.success(response);
    });
  };
  Model = (function(_super) {

    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    Model.prototype.sync = userSync;

    return Model;

  })(Scrundle.Script.Model);
  Collection = (function(_super) {

    __extends(Collection, _super);

    function Collection() {
      return Collection.__super__.constructor.apply(this, arguments);
    }

    Collection.prototype.model = Model;

    Collection.prototype.sync = userSync;

    return Collection;

  })(Scrundle.Script.Collection);
  Views.ListItem = (function(_super) {

    __extends(ListItem, _super);

    function ListItem() {
      return ListItem.__super__.constructor.apply(this, arguments);
    }

    ListItem.prototype.tagName = 'tr';

    ListItem.prototype.events = {
      'click': function() {
        return this.trigger('edit', this.model);
      }
    };

    ListItem.prototype.template = function() {
      td("" + (this.get('code')));
      td("" + (this.get('title')));
      return td("" + (this.get('description')));
    };

    ListItem.prototype.render = function() {
      this.$el.html(ck.render(this.template, this.model));
      return this;
    };

    return ListItem;

  })(Backbone.View);
  Views.MyScripts = (function(_super) {

    __extends(MyScripts, _super);

    function MyScripts() {
      return MyScripts.__super__.constructor.apply(this, arguments);
    }

    MyScripts.prototype.tagName = 'section';

    MyScripts.prototype.className = 'user-scripts';

    MyScripts.prototype.template = function() {
      return div({
        "class": 'row'
      }, function() {
        div({
          "class": 'container span5 pull-left'
        }, function() {
          div({
            "class": 'page-header'
          }, function() {
            return h2(function() {
              span({
                "class": 'icon-briefcase icon-large steps'
              });
              return text(' My scripts');
            });
          });
          return div({
            "class": 'user-list-view span5'
          }, function() {
            return table({
              "class": 'table'
            }, function() {
              return tbody(function() {});
            });
          });
        });
        return div({
          "class": 'user-edit-view span6'
        }, function() {});
      });
    };

    MyScripts.prototype.addListItem = function(script) {
      var _this = this;
      script.listView = new Views.ListItem({
        model: script
      });
      script.listView.render().$el.appendTo(this.$('.user-list-view tbody'));
      script.listView.on('edit', function(selectedScript) {
        return _this.editItem(selectedScript);
      });
      return this;
    };

    MyScripts.prototype.editItem = function(script) {
      var _ref;
      this.$('.user-list-view tr').removeClass('sel');
      script.listView.$el.addClass('sel');
      if ((_ref = this.detailView) != null) {
        _ref.remove();
      }
      this.detailView = new Views.DetailItem({
        model: script
      });
      this.detailView.render().$el.appendTo(this.$('.user-edit-view'));
      return this;
    };

    MyScripts.prototype.render = function() {
      var _this = this;
      this.$el.html(ck.render(this.template));
      this.collection.each(function(script) {
        return _this.addListItem(script);
      });
      return this;
    };

    return MyScripts;

  })(Backbone.View);
  Views.DetailItem = (function(_super) {

    __extends(DetailItem, _super);

    function DetailItem() {
      return DetailItem.__super__.constructor.apply(this, arguments);
    }

    DetailItem.prototype.tagName = 'form';

    DetailItem.prototype.className = 'edit-view well form-horizontal';

    DetailItem.prototype.initialize = function() {
      var _this = this;
      return this.model.on('change', function(m) {
        console.log('changed: ', m);
        return _this.model.listView.render();
      });
    };

    DetailItem.prototype.urlTemplate = function() {
      return fieldset({
        "class": 'control-group'
      }, function() {
        return input({
          type: 'text',
          "class": 'span2',
          placeholder: 'script url'
        });
      });
    };

    DetailItem.prototype.events = {
      'keyup input.title, input.code': function() {
        this.updateTitle();
        return this.checkCode();
      },
      'change input, textarea': function() {
        var changes,
          _this = this;
        changes = {
          title: this.$('input.title').val(),
          description: this.$('textarea.description').val(),
          docs: this.$('input.docs').val(),
          versions: {
            latest: this.$('input.latest').val()
          }
        };
        return this.model.save(changes, {
          success: function(model, resp) {
            return console.log('save resp: ', resp);
          }
        });
      }
    };

    DetailItem.prototype.checkCode = function() {
      var codeError,
        _this = this;
      codeError = function(errText) {
        if (errText) {
          this.$('.control-group.code').addClass('error');
        } else {
          this.$('.control-group.code').removeClass('error');
        }
        this.$('.code .help-block').text(errText);
        return errText;
      };
      if (this.$('input.code').val() === '') {
        return codeError('You must enter a code.');
      } else {
        return this.model.isCodeValid(this.$('input.code').val(), function(codeAvailable) {
          var alreadyExists;
          console.log(codeAvailable);
          alreadyExists = !codeAvailable;
          if (alreadyExists) {
            return codeError('This code already exists. Try another');
          } else {
            return codeError('');
          }
        });
      }
    };

    DetailItem.prototype.updateTitle = function(e) {
      var code, _ref;
      this.$('.title-label').text((_ref = this.$('input.title').val()) != null ? _ref : 'New script');
      return this.$('.code-label').text((code = this.$('input.code').val()) ? " (" + code + ")" : '');
    };

    DetailItem.prototype.template = function() {
      div({
        "class": 'page-header'
      }, function() {
        return h3(function() {
          var code, _ref;
          span({
            "class": 'title-label'
          }, "" + ((_ref = this.get('title')) != null ? _ref : 'New script'));
          if ((code = this.get('code')) != null) {
            return span({
              "class": 'code-label'
            }, " (" + code + ")");
          }
        });
      });
      return fieldset({
        "class": ''
      }, function() {
        div({
          "class": 'control-group title'
        }, function() {
          label({
            "class": 'control-label'
          }, 'Title:');
          return div({
            "class": 'controls'
          }, function() {
            var _ref;
            return input({
              type: 'text',
              "class": 'title span3',
              placeholder: 'title',
              value: "" + ((_ref = this.get('title')) != null ? _ref : '')
            });
          });
        });
        div({
          "class": 'control-group code'
        }, function() {
          label({
            "class": 'control-label'
          }, 'Code:');
          return div({
            "class": 'controls'
          }, function() {
            var _ref;
            input({
              type: 'text',
              "class": 'code span1',
              placeholder: 'code',
              value: "" + ((_ref = this.get('code')) != null ? _ref : '')
            });
            return span({
              "class": 'help-inline'
            }, 'unique code < 5 characters');
          });
        });
        div({
          "class": 'control-group'
        }, function() {
          label({
            "class": 'control-label'
          }, 'Script (latest):');
          return div({
            "class": 'controls'
          }, function() {
            var _ref;
            input({
              type: 'text',
              "class": 'latest',
              placeholder: 'script url',
              value: "" + ((_ref = this.getLatestScriptURL()) != null ? _ref : '')
            });
            return span({
              "class": 'help-inline'
            }, '');
          });
        });
        div({
          "class": 'control-group'
        }, function() {
          label({
            "class": 'control-label'
          }, 'Docs:');
          return div({
            "class": 'controls'
          }, function() {
            var _ref;
            input({
              type: 'text',
              "class": 'docs',
              placeholder: 'docs url',
              value: "" + ((_ref = this.getLatestScriptURL()) != null ? _ref : '')
            });
            return span({
              "class": 'help-inline'
            }, '');
          });
        });
        div({
          "class": 'control-group'
        }, function() {
          label({
            "class": 'control-label'
          }, 'Description:');
          return div({
            "class": 'controls'
          }, function() {
            var _ref;
            return textarea({
              "class": 'description',
              placeholder: 'script description...'
            }, "" + ((_ref = this.get('description')) != null ? _ref : ''));
          });
        });
        return div({
          "class": 'modal-footer'
        }, function() {
          button({
            "class": 'btn cancel'
          }, 'Cancel');
          button({
            "class": 'btn btn-danger delete'
          }, 'Delete');
          return button({
            "class": 'btn btn-success save'
          }, 'Save');
        });
      });
    };

    DetailItem.prototype.render = function() {
      this.$el.html(ck.render(this.template, this.model));
      this.delegateEvents();
      return this;
    };

    return DetailItem;

  })(Backbone.View);
  Views.List = (function(_super) {

    __extends(List, _super);

    function List() {
      return List.__super__.constructor.apply(this, arguments);
    }

    List.prototype.tagName = 'div';

    List.prototype.className = 'user-list-view span6';

    List.prototype.template = function() {};

    List.prototype.render = function() {
      this.$el.html(ck.render(this.template, this));
      return this;
    };

    return List;

  })(Backbone.View);
  exports.Model = Model;
  return exports.Collection = Collection;
});

module('Scrundle.User', function(exports, top) {
  var Model;
  Model = (function(_super) {

    __extends(Model, _super);

    function Model() {
      return Model.__super__.constructor.apply(this, arguments);
    }

    Model.prototype.initialize = function() {
      this.myScripts = new Scrundle.User.Script.Collection();
      return this.myScripts.fetch({
        mine: true
      });
    };

    Model.prototype.getName = function() {
      return this.get('twit').name;
    };

    Model.prototype.getIconUrl = function() {
      return this.get('twit').profileImageUrl;
    };

    return Model;

  })(Backbone.Model);
  return exports.Model = Model;
});

$(function() {
  Scrundle.app.user = new Scrundle.User.Model(window.user);
  Scrundle.app.session = window.session;
  Scrundle.app.views.navBar.login(Scrundle.app.user);
  return Scrundle.app.route('mine', 'mine', function() {
    this.closeViews();
    Scrundle.app.views.myScripts = new Scrundle.User.Script.Views.MyScripts({
      collection: Scrundle.app.user.myScripts
    });
    return Scrundle.app.views.myScripts.render().open();
  });
});
