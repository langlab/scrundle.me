// Generated by CoffeeScript 1.3.3
(function() {
  var Bundler, ObjectId, Schema, Script, ScriptSchema, app, ck, events, express, http, https, io, mongoose, scriptsJSON, url, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  express = require('express');

  ck = require('coffeekup');

  scriptsJSON = require('./scripts');

  _ = require('underscore');

  url = require('url');

  http = require('http');

  https = require('https');

  events = require('events');

  mongoose = require('mongoose');

  mongoose.connect('mongodb://localhost/scrundle');

  Schema = mongoose.Schema;

  ObjectId = Schema.ObjectId;

  ScriptSchema = new Schema({
    code: String,
    title: String,
    description: String,
    versions: {}
  });

  ScriptSchema.statics = {
    search: function(term, cb) {
      var _this = this;
      return this.find({
        $or: [
          {
            title: {
              $regex: term,
              $options: 'i'
            }
          }, {
            description: {
              $regex: term,
              $options: 'i'
            }
          }, {
            code: {
              $regex: term,
              $options: 'i'
            }
          }
        ]
      }).exec(function(err, scripts) {
        return cb(err, scripts);
      });
    }
  };

  Script = mongoose.model('script', ScriptSchema);

  /*
  # insert into db
  for s in scriptsJSON
    scr = new Script s
    scr.save()
  */


  app = express.createServer();

  io = require('socket.io').listen(app);

  app.configure(function() {
    app.use(express["static"]("" + __dirname + "/pub"));
    app.use(express.bodyParser());
    app.set('views', "" + __dirname + "/src/views");
    app.set('view options', {
      layout: false
    });
    app.set('view engine', 'coffee');
    return app.register('.coffee', require('coffeekup').adapters.express);
  });

  Bundler = (function(_super) {

    __extends(Bundler, _super);

    function Bundler() {
      return Bundler.__super__.constructor.apply(this, arguments);
    }

    Bundler.prototype.getScript = function(uri, ord, cb) {
      var httpLib, rObj, scriptData;
      rObj = url.parse(uri);
      scriptData = '';
      httpLib = rObj.protocol === 'https:' ? https : http;
      return httpLib.get({
        host: rObj.host,
        path: rObj.path,
        port: rObj.port
      }, function(resp) {
        resp.on('data', function(chunk) {
          return scriptData = scriptData + chunk;
        });
        return resp.on('end', function() {
          return cb(ord, scriptData);
        });
      });
    };

    Bundler.prototype.getBundle = function(scriptKeys) {
      var bundle, scriptsDownloaded,
        _this = this;
      bundle = [];
      scriptsDownloaded = 0;
      return Script.where('code')["in"](scriptKeys).exec(function(err, scripts) {
        var i, script, scriptTitles, _i, _len, _results;
        if (err) {
          console.log(err);
        }
        scriptTitles = _.map(scripts, function(scr) {
          var _ref, _ref1;
          return "" + ((_ref = scr.title) != null ? _ref : '') + " (" + ((_ref1 = scr.code) != null ? _ref1 : '') + ")";
        });
        _results = [];
        for (i = _i = 0, _len = scripts.length; _i < _len; i = ++_i) {
          script = scripts[i];
          _results.push(_this.getScript(script.versions.latest, i, function(ord, scriptData) {
            var bundled;
            bundle[ord] = scriptData;
            scriptsDownloaded++;
            _this.emit('progress', scriptsDownloaded);
            if (scriptsDownloaded === scripts.length) {
              bundled = '/* scripts bundled with love by scrundle.me -- includes :' + scriptTitles.join(', ') + '*/ \n';
              return _this.emit('bundle', bundled + bundle.join(';'));
            }
          }));
        }
        return _results;
      });
    };

    return Bundler;

  })(events.EventEmitter);

  app.get('/', function(req, res) {
    return res.render('index');
  });

  app.get('/ck.js', function(req, res) {
    return res.sendfile("" + __dirname + "/node_modules/coffeekup/lib/coffeekup.js");
  });

  app.get(/^\/([^e]+)(\/(.+)\.js)?/, function(req, res) {
    var bd;
    console.log(req.params);
    bd = new Bundler();
    bd.getBundle(req.params[0].split('/'));
    return bd.on('bundle', function(bundle) {
      return res.send(bundle, {
        'Content-type': 'text/javascript'
      });
    });
  });

  io.sockets.on('connection', function(socket) {
    socket.on('script', function(data) {
      var q,
        _this = this;
      console.log('read: ', data);
      switch (data.method) {
        case 'read':
          if ((q = data.options.query)) {
            return Script.search(q, function(err, matchingScripts) {
              return _this.emit('script', 'read', matchingScripts);
            });
          } else {
            return Script.find(function(err, scripts) {
              return _this.emit('script', 'read', scripts);
            });
          }
      }
    });
    return socket.on('scrundle', function(codes) {
      var bd,
        _this = this;
      console.log('recv:', codes);
      bd = new Bundler();
      bd.getBundle(codes);
      bd.on('bundle', function(bundle) {
        return _this.emit('scrundle:source', bundle);
      });
      return bd.on('progress', function(count) {
        return _this.emit('scrundle:progress', count);
      });
    });
  });

  app.listen(4444);

}).call(this);
